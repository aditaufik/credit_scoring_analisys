{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9d60f579-3958-4ffa-b4ec-58da5a3ccd00",
   "metadata": {},
   "outputs": [],
   "source": [
    "import streamlit as st\n",
    "import pandas as pd\n",
    "import joblib\n",
    "from data_preprocessing import data_preprocessing, encoder_Credit_Mix, encoder_Payment_Behaviour, encoder_Payment_of_Min_Amount\n",
    "from prediction import prediction\n",
    "\n",
    "col1, col2 = st.columns([1, 5])\n",
    "with col1:\n",
    "    st.image(\"https://github.com/dicodingacademy/assets/raw/main/logo.png\", width=130)\n",
    "with col2:\n",
    "    st.header('Credit Scoring App (Prototype) :sparkles:')\n",
    "\n",
    "data = pd.DataFrame()\n",
    "\n",
    "col1, col2, col3 = st.columns(3)\n",
    "\n",
    "with col1:\n",
    "    Credit_Mix = st.selectbox(label='Credit_Mix', options=encoder_Credit_Mix.classes_, index=1)\n",
    "    data[\"Credit_Mix\"] = [Credit_Mix]\n",
    "\n",
    "with col2:\n",
    "    Payment_of_Min_Amount = st.selectbox(label='Payment_of_Min_Amount', options=encoder_Payment_of_Min_Amount.classes_, index=1)\n",
    "    data[\"Payment_of_Min_Amount\"] = [Payment_of_Min_Amount]\n",
    "\n",
    "with col3:\n",
    "    Payment_Behaviour = st.selectbox(label='Payment_Behaviour', options=encoder_Payment_Behaviour.classes_, index=5)\n",
    "    data[\"Payment_Behaviour\"] = Payment_Behaviour\n",
    "\n",
    "col1, col2, col3, col4 = st.columns(4)\n",
    "\n",
    "with col1:\n",
    "    # st.header(\"Kolom 1\")\n",
    "    Age = int(st.number_input(label='Age', value=23))\n",
    "    data[\"Age\"] = Age\n",
    "\n",
    "with col2:\n",
    "    Num_Bank_Accounts = int(st.number_input(label='Num_Bank_Accounts', value=3))\n",
    "    data[\"Num_Bank_Accounts\"] = Num_Bank_Accounts\n",
    "\n",
    "with col3:\n",
    "    Num_Credit_Card = int(st.number_input(label='Num_Credit_Card', value=4))\n",
    "    data[\"Num_Credit_Card\"] = Num_Credit_Card\n",
    "\n",
    "with col4:\n",
    "    Interest_Rate = float(st.number_input(label='Interest_Rate', value=3))\n",
    "    data[\"Interest_Rate\"] = Interest_Rate\n",
    "\n",
    "\n",
    "col1, col2, col3, col4 = st.columns(4)\n",
    "\n",
    "with col1:\n",
    "    Num_of_Loan = int(st.number_input(label='Num_of_Loan', value=4))\n",
    "    data[\"Num_of_Loan\"] = Num_of_Loan\n",
    "\n",
    "with col2:\n",
    "    # st.header(\"Kolom 1\")\n",
    "    Delay_from_due_date = int(st.number_input(label='Delay_from_due_date', value=3))\n",
    "    data[\"Delay_from_due_date\"] = Delay_from_due_date\n",
    "\n",
    "with col3:\n",
    "    Num_of_Delayed_Payment = int(st.number_input(label='Num_of_Delayed_Payment', value=7))\n",
    "    data[\"Num_of_Delayed_Payment\"] = Num_of_Delayed_Payment\n",
    "\n",
    "with col4:\n",
    "    Changed_Credit_Limit = float(st.number_input(label='Changed_Credit_Limit', value=11.27))\n",
    "    data[\"Changed_Credit_Limit\"] = Changed_Credit_Limit\n",
    "\n",
    "col1, col2, col3, col4 = st.columns(4)\n",
    "\n",
    "with col1:\n",
    "    Num_Credit_Inquiries = float(st.number_input(label='Num_Credit_Inquiries', value=5))\n",
    "    data[\"Num_Credit_Inquiries\"] = Num_Credit_Inquiries\n",
    "\n",
    "with col2:\n",
    "    Outstanding_Debt = float(st.number_input(label='Outstanding_Debt', value=809.98))\n",
    "    data[\"Outstanding_Debt\"] = Outstanding_Debt\n",
    "\n",
    "with col3:\n",
    "    Monthly_Inhand_Salary = float(st.number_input(label='Monthly_Inhand_Salary', value=1824.8))\n",
    "    data[\"Monthly_Inhand_Salary\"] = Monthly_Inhand_Salary\n",
    "\n",
    "with col4:\n",
    "    Monthly_Balance = float(st.number_input(label='Monthly_Balance', value=186.26))\n",
    "    data[\"Monthly_Balance\"] = Monthly_Balance\n",
    "\n",
    "col1, col2, col3 = st.columns(3)\n",
    "\n",
    "with col1:\n",
    "    Amount_invested_monthly = float(st.number_input(label='Amount_invested_monthly', value=236.64))\n",
    "    data[\"Amount_invested_monthly\"] = Amount_invested_monthly\n",
    "\n",
    "with col2:\n",
    "    Total_EMI_per_month = float(st.number_input(label='Total_EMI_per_month', value=49.5))\n",
    "    data[\"Total_EMI_per_month\"] = Total_EMI_per_month\n",
    "\n",
    "with col3:\n",
    "    Credit_History_Age = float(st.number_input(label='Credit_History_Age', value=216))\n",
    "    data[\"Credit_History_Age\"] = Credit_History_Age\n",
    "\n",
    "with st.expander(\"View the Raw Data\"):\n",
    "    st.dataframe(data=data, width=800, height=10)\n",
    "\n",
    "if st.button('Predict'):\n",
    "    new_data = data_preprocessing(data=data)\n",
    "    with st.expander(\"View the Preprocessed Data\"):\n",
    "        st.dataframe(data=new_data, width=800, height=10)\n",
    "    st.write(\"Credit Scoring: {}\".format(prediction(new_data)))"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
